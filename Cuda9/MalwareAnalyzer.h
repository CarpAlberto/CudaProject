#pragma once
#include "includes.h"
#include "IAnalyzer.h"
#include "HuffmanWordProcessor.h"


namespace gpuNN {

	class PEIterator {
	public:
		static vStrings ss;
		static int printImports(void *N, VA impAddr, std::string &modName, std::string &symName) {
			static_cast<void>(N);

			ss.emplace_back(modName + " " + symName);
			return 0;
		}
	};
	
	class MalwareAnalyzer :
		public IAnalyzer{
	
	private :
		HuffmanWordProcessor wordProcessor;
		int iterationNumber = 100;
	public:
		MalwareAnalyzer();
		virtual ~MalwareAnalyzer();
		void BuildFeatures(const std::string& filename, INeuralNetwork*& network);
		virtual void Analyze(INeuralNetwork* network);
	protected:
		/// <summary>
		/// Loads the string from the specified PE strucuture
		/// </summary>
		/// <param name="pe">The pe structure of the exec</param>
		/// <returns>An array of strings</returns>
		vStrings LoadStringsFromExe(parsed_pe* pe);
	};
}