#include "MalwareAnalyzer.h"
#include "NeuralNetwork.h"

using namespace gpuNN;

vStrings PEIterator::ss;


MalwareAnalyzer::MalwareAnalyzer()
{

}

MalwareAnalyzer::~MalwareAnalyzer()
{
}

void MalwareAnalyzer::Analyze(INeuralNetwork* network)
{	
	network->Train(this->iterationNumber);
		
}

vStrings MalwareAnalyzer::LoadStringsFromExe(parsed_pe* pe)
{
	IterImpVAString(pe,PEIterator::printImports,NULL);

	return std::move(PEIterator::ss);
}

void MalwareAnalyzer::BuildFeatures(const std::string& filename, INeuralNetwork*& network)
{
	parsed_pe *p = ParsePEFromFile(filename.c_str());
	
	auto arrayStrings = LoadStringsFromExe(p);

	auto sequenceModel = this->wordProcessor.BuildModel(arrayStrings);

	auto vModel = sequenceModel.toVector();

	/*Create a topology with size of the array as input and two outputs*/
	std::vector<size_t> topology = { vModel.size(),3,2 };

	network = new NeuralNetwork(topology, 1, 0.05, 1);

	network->SetCurrentInput(vModel);
	network->SetCurrentTarget({ 1,0 });


}